version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.9
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Create artifacts directory
          command: mkdir -p ~/repo/artifacts
      - run:
          name: Build image
          command: docker build -t "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}" ~/repo/go
      - run:
          name: Save image in artifacts directory
          command: docker save "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}" -o ~/repo/artifacts/image
      - persist_to_workspace:
          root: artifacts
          paths:
            - image

  push:
    docker:
      - image: circleci/golang:1.9
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /home/circleci/repo/artifacts
      - run:
          name: Load Docker image
          command: docker load -i artifacts/image
      - run:
          name: Connect to Docker hub
          command: docker login $REGISTRY_ENDPOINT --username $REGISTRY_USERNAME --password $REGISTRY_PASSWORD
      - run:
          name: Push Docker image
          command: docker push "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"

  deploy-staging:
    docker:
      - image: circleci/python:3.8.2
    working_directory: ~/repo
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ed:20:8e:3f:e9:d6:1e:90:b5:b8:54:70:c9:05:2c:c2"
      - setup_remote_docker
      - run:
          name: Install pip
          command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py --user
      - run:
          name: Install ansible
          command: pip install --user ansible
      - run:
          name: Install roles for Ansible from galaxy
          command: |
            cd ~/repo/cloud/ansible
            ansible-galaxy install geerlingguy.docker
      - run:
          name: Add ansible.cfg
          command: export ANSIBLE_CONFIG=~/repo/cloud/ansible/ansible.cfg
      - run:
          name: Modify python ec2 script permissions
          command: chmod 0744 ~/repo/cloud/ansible/inventory/ec2.py
      - run:
          name: Install pip dependencies for ec2 script
          command: pip install -r ~/repo/cloud/ansible/requirement.txt
      - run:
          name: Deploy on staging with Ansible
          command: |
            cd ~/repo/cloud/ansible
            ansible-playbook -i inventory staging.yml --user ubuntu --key-file=~/.ssh/id_rsa --extra-vars="application_docker_tag=${DOCKER_IMAGE_TAG} application_docker_image=${DOCKER_IMAGE_NAME}"

  deploy-production:
    docker:
      - image: circleci/python:3.8.2
    working_directory: ~/repo
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ed:20:8e:3f:e9:d6:1e:90:b5:b8:54:70:c9:05:2c:c2"
      - setup_remote_docker
      - run:
          name: Install pip
          command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py --user
      - run:
          name: Install ansible
          command: pip install --user ansible
      - run:
          name: Install roles for Ansible from galaxy
          command: |
            cd ~/repo/cloud/ansible
            ansible-galaxy install geerlingguy.docker
      - run:
          name: Add ansible.cfg
          command: export ANSIBLE_CONFIG=~/repo/cloud/ansible/ansible.cfg
      - run:
          name: Modify python ec2 script permissions
          command: chmod 0744 ~/repo/cloud/ansible/inventory/ec2.py
      - run:
          name: Install pip dependencies for ec2 script
          command: pip install -r ~/repo/cloud/ansible/requirement.txt
      - run:
          name: Deploy on staging with Ansible
          command: |
            cd ~/repo/cloud/ansible
            ansible-playbook -i inventory production.yml --user ubuntu --key-file=~/.ssh/id_rsa --extra-vars="application_docker_tag=${DOCKER_IMAGE_TAG} application_docker_image=${DOCKER_IMAGE_NAME}"


workflows:
  version: 2
  deploy:
    jobs:
      - build
      - push:
          requires:
            - build
      - deploy-staging:
          requires:
            - push
      - deploy-production:
          requires:
            - push